{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 CourierNewPSMT;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\fet2\ftnbj\aenddoc
\pgnrestart\pgnstarts0
\pard\plain \fi360\ltrch\loch {\f0\fs24\b0\i0 Why Trust a Smart Contract?}
\par\plain {\f0\fs24\b0\i0 Smart contracts are designed and implemented within blockchains, and therefore they inherit some of the blockchain\loch\af0\hich\af0\dbch\af0\uc1\u8217\'92s properties:}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 They\loch\af0\hich\af0\dbch\af0\uc1\u8217\'92re immutable, which means a smart contract can never be changed and no one can tamper with or break a contract.}
\par\plain {\f0\fs24\b0\i0 They\loch\af0\hich\af0\dbch\af0\uc1\u8217\'92re distributed, which means that the outcome of the contract is validated by everyone in the network, just like any transaction on a blockchain. Distribution makes it impossible for an attacker to force control to release funds, as all other participants would detect such an attempt and mark it as invalid.}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Smart Contract Benefits}
\par\plain {\f0\fs24\b0\i0 Explicit programming algorithms in core and blockchain properties like decentralization, transparency, fraud resistance, and others make smart contracts a credible alternative for establishing business relations and performing transactions.}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 As an alternative to traditional contracts with a central business model, here are the benefits that smart contracts offer businesses:}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Direct dealings with customers. Smart contracts remove the need for intermediaries and allow for transparent, direct relationships with customers.}
\par\plain {\f0\fs24\b0\i0 Resistance to failure. Since businesses aren\loch\af0\hich\af0\dbch\af0\uc1\u8217\'92t dependent on a third party, no single person or entity is in control of data or money. Decentralization means that even if any individual leaves the blockchain network, the network will continue to function with no loss of data or integrity.}
\par\plain {\f0\fs24\b0\i0 More trust. Business agreements are automatically executed and enforced. Plus, these agreements are immutable and therefore unbreakable.}
\par\plain {\f0\fs24\b0\i0 Fraud reduction. Since smart contracts are stored in a distributed blockchain network, their outcome is validated by everyone in that network. Therefore, no one can force control to release other people\loch\af0\hich\af0\dbch\af0\uc1\u8217\'92s funds or data, as all other blockchain participants would spot this and mark such an attempt as invalid.}
\par\plain {\f0\fs24\b0\i0 Cost efficiency. Eliminating intermediaries removes additional fees, allowing businesses and their customers not only to interact and transact directly but also to do so with low to no fees for transactions.}
\par\plain {\f0\fs24\b0\i0 Record keeping. All contract transactions are stored in chronological order in the blockchain and can be accessed along with the complete audit trail.}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 How smart contracts work}
\par\plain {\f0\fs24\b0\i0 It\loch\af0\hich\af0\dbch\af0\uc1\u8217\'92s worth noting that bitcoin was the first to support basic smart contracts in the sense that the network can transfer value from one person to another. The network of nodes will only validate transactions if certain conditions are met.}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 But, bitcoin is limited to the currency use case.}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 By contrast, ethereum replaces bitcoin\loch\af0\hich\af0\dbch\af0\uc1\u8217\'92s more restrictive language (a scripting language of a hundred or so scripts) and replaces it with a language that allows developers to write their own programs.}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Ethereum allows developers to program their own smart contracts, or \loch\af0\hich\af0\dbch\af0\uc1\u8216\'91autonomous agents\u8217\'92, as the ethereum white paper calls them. The language is \u8216\'91Turing-complete\u8217\'92, meaning it supports a broader set of computational instructions.}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Smart contracts can:}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Function as \loch\af0\hich\af0\dbch\af0\uc1\u8216\'91multi-signature\u8217\'92 accounts, so that funds are spent only when a required percentage of people agree}
\par\plain {\f0\fs24\b0\i0 Manage agreements between users, say, if one buys insurance from the other}
\par\plain {\f0\fs24\b0\i0 Provide utility to other contracts (similar to how a software library works)}
\par\plain {\f0\fs24\b0\i0 Store information about an application, such as domain registration information or membership records.}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Misc}
\par\plain {\f0\fs24\b0\i0 Call contract function as transaction will not give a result.}
\par\plain {\f0\fs24\b0\i0 Can emit event}
\par\plain {\f0\fs24\b0\i0 Can call a view method as non-transaction}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Description\tab \tab \tab alter state?}
\par\plain {\f0\fs24\b0\i0 pure\tab Doesn't read or write data\tab N}
\par\plain {\f0\fs24\b0\i0 view\tab Reads, but doesn't write data\tab N}
\par\plain {\f0\fs24\b0\i0 payable\tab Expecting payment of ether\tab Y}
\par\plain {\f0\fs24\b0\i0 (unspecified)\tab Probably writes data\tab Y}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0 \{\\Scrv_ps=pragma solidity >=0.4.24;\\end_Scrv_ps\}}
\par\plain {\f0\fs24\b0 \{\\Scrv_ps= \\end_Scrv_ps\}}
\par\plain {\f0\fs24\b0 \{\\Scrv_ps=contract NameContract \{\\end_Scrv_ps\}}
\par\plain {\f0\fs24\b0 \{\\Scrv_ps= \\end_Scrv_ps\}}
\par\plain {\f0\fs24\b0 \{\\Scrv_ps=    string private name = "Ire";\\end_Scrv_ps\}}
\par\plain {\f0\fs24\b0 \{\\Scrv_ps= \\end_Scrv_ps\}}
\par\plain {\f0\fs24\b0 \{\\Scrv_ps=    function getName() public view returns (string)\\end_Scrv_ps\}}
\par\plain {\f0\fs24\b0 \{\\Scrv_ps=    \{\\end_Scrv_ps\}}
\par\plain {\f0\fs24\b0 \{\\Scrv_ps=        return name;\\end_Scrv_ps\}}
\par\plain {\f0\fs24\b0 \{\\Scrv_ps=    \}\\end_Scrv_ps\}}
\par\plain {\f0\fs24\b0 \{\\Scrv_ps=    function setName(string newName) public\\end_Scrv_ps\}}
\par\plain {\f0\fs24\b0 \{\\Scrv_ps=    \{\\end_Scrv_ps\}}
\par\plain {\f0\fs24\b0 \{\\Scrv_ps=        name = newName;\\end_Scrv_ps\}}
\par\plain {\f0\fs24\b0 \{\\Scrv_ps=    \}\\end_Scrv_ps\}}
\par\plain {\f0\fs24\b0 \{\\Scrv_ps=\}\\end_Scrv_ps\}}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Going back to my example contract, we can see that the function getName() has the type view which means it does not change the state of the contract. When calling this function via web3.js, we should use the call() method.}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 NameContract.methods.getName().call();}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 On the contrary, the setName() function doesn\loch\af0\hich\af0\dbch\af0\uc1\u8217\'92t have a specified type and does change the state of the contract, in this case the value of the name variable. For these types of funtions, we should use the send() method.}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 NameContract.methods.setName("bitsofcode").send();}}